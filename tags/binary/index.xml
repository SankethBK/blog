<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Binary on Sanketh's Blog</title><link>https://sankethbk.github.io/blog/tags/binary/</link><description>Recent content in Binary on Sanketh's Blog</description><generator>Hugo -- 0.148.1</generator><language>en-us</language><lastBuildDate>Sun, 21 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://sankethbk.github.io/blog/tags/binary/index.xml" rel="self" type="application/rss+xml"/><item><title>Representation of Negative Numbers in Hardware</title><link>https://sankethbk.github.io/blog/posts/binary/2024-07-21-representation-of-negative-numbers/</link><pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate><guid>https://sankethbk.github.io/blog/posts/binary/2024-07-21-representation-of-negative-numbers/</guid><description>&lt;p>Representing negative numbers in binary poses unique challenges due to the inherent nature of binary systems. Unlike decimal systems, which can easily use a minus sign to indicate negative values, binary systems must encode this information within a fixed number of bits. This requirement leads to various methods of representation, each with its own set of advantages and limitations. The main challenge lies in developing a system that can accurately represent both positive and negative values while ensuring that arithmetic operations remain efficient and straightforward. In the following sections, we will explore several common approaches to representing negative numbers in binary, including their respective challenges and trade-offs.&lt;/p></description></item></channel></rss>