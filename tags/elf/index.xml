<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Elf on Sanketh's Blog</title><link>https://sankethbk.github.io/blog/tags/elf/</link><description>Recent content in Elf on Sanketh's Blog</description><generator>Hugo -- 0.152.2</generator><language>en-us</language><lastBuildDate>Wed, 15 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sankethbk.github.io/blog/tags/elf/index.xml" rel="self" type="application/rss+xml"/><item><title>ELF Format: Part 3</title><link>https://sankethbk.github.io/blog/posts/cpu/2025-10-15-elf-format-part-3/</link><pubDate>Wed, 15 Oct 2025 00:00:00 +0000</pubDate><guid>https://sankethbk.github.io/blog/posts/cpu/2025-10-15-elf-format-part-3/</guid><description>&lt;h1 id="elf-format-sections-and-section-header-table"&gt;ELF Format: Sections and Section Header Table&lt;/h1&gt;
&lt;p&gt;In the previous post, we explored Program Headers and Segments - the runtime view of an ELF file. Now we&amp;rsquo;ll look at Section Headers and Sections - the link-time and debugging view.&lt;/p&gt;
&lt;h2 id="what-are-sections"&gt;What Are Sections?&lt;/h2&gt;
&lt;p&gt;Sections are the link-time view of an ELF file. While segments tell the operating system how to load and execute a program, sections organize the file&amp;rsquo;s contents for:&lt;/p&gt;</description></item><item><title>ELF Format: Part 2</title><link>https://sankethbk.github.io/blog/posts/cpu/2025-10-13-elf-format-part-2/</link><pubDate>Mon, 13 Oct 2025 00:00:00 +0000</pubDate><guid>https://sankethbk.github.io/blog/posts/cpu/2025-10-13-elf-format-part-2/</guid><description>&lt;h1 id="elf-format-segments-and-program-header-table"&gt;ELF Format: Segments and Program Header Table&lt;/h1&gt;
&lt;p&gt;After understanding the ELF Header, the next critical component is the Program Header Table. This table describes segments - the portions of the file that will be loaded into memory when the program executes.&lt;/p&gt;
&lt;h2 id="what-are-segments"&gt;What Are Segments?&lt;/h2&gt;
&lt;p&gt;Segments are the runtime view of an ELF file. While sections (which we&amp;rsquo;ll cover later) are used during linking and debugging, segments are what the operating system cares about when loading and executing a program.&lt;/p&gt;</description></item><item><title>ELF Format: Part 1</title><link>https://sankethbk.github.io/blog/posts/cpu/2025-10-06-elf-format/</link><pubDate>Wed, 01 Oct 2025 00:00:00 +0000</pubDate><guid>https://sankethbk.github.io/blog/posts/cpu/2025-10-06-elf-format/</guid><description>&lt;h1 id="elf-format-elf-header"&gt;ELF Format: ELF Header&lt;/h1&gt;
&lt;h2 id="what-is-elf"&gt;What is ELF?&lt;/h2&gt;
&lt;p&gt;ELF (Executable and Linkable Format) is the standard binary format used by Unix-like systems (Linux, BSD, etc.) for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Executable files (a.out, /bin/ls)&lt;/li&gt;
&lt;li&gt;Object files (.o)&lt;/li&gt;
&lt;li&gt;Shared libraries (.so)&lt;/li&gt;
&lt;li&gt;Core dumps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Itâ€™s a container format that describes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What parts of the file get loaded into memory,&lt;/li&gt;
&lt;li&gt;Where execution starts,&lt;/li&gt;
&lt;li&gt;How relocations and dynamic linking are handled.&lt;/li&gt;
&lt;li&gt;Contains useful information for the debuggers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="general-structure-of-an-elf-file"&gt;General Structure of an ELF File&lt;/h2&gt;
&lt;p&gt;An ELF file is organized into several key components that serve different purposes during compilation, linking, and execution.&lt;/p&gt;</description></item></channel></rss>